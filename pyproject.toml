[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "network-anomaly-detection"
version = "1.0.0"
description = "Machine Learning for Network Anomaly and Failure Detection"
authors = [{name = "Michael Hernandez"}]
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
keywords = ["network", "anomaly-detection", "bgp", "snmp", "machine-learning", "matrix-profile"]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scipy>=1.10.0",
    "scikit-learn>=1.3.0",
    "stumpy>=1.12.0",
    "pydantic>=2.6.0",
    "streamlit>=1.31.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.13.0",
    "graphviz>=0.20.0",
    "nats-py>=2.6.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
snmp = [
    "snmpsim>=0.4.8",
    "pysnmp>=4.4.0",
]

dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21",
    "pytest-cov>=4.0",
    "ruff>=0.3.0",
    "black>=24.0.0",
]

gpu = [
    "cupy-cuda12x>=12.0.0",  # For GPU-accelerated Matrix Profile
]

all = [
    "snmpsim>=0.4.8",
    "pysnmp>=4.4.0",
    "pytest>=7.0",
    "pytest-asyncio>=0.21",
    "pytest-cov>=4.0",
    "ruff>=0.3.0",
    "black>=24.0.0",
]

[project.urls]
Homepage = "https://github.com/your-username/capstone-anomaly"
Repository = "https://github.com/your-username/capstone-anomaly"
Documentation = "https://github.com/your-username/capstone-anomaly/blob/main/README.md"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["anomaly_detection*"]
namespaces = false

[tool.setuptools.package-data]
anomaly_detection = ["**/*.yml", "**/*.yaml", "**/*.json"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N"]
ignore = [
    "E501",  # Line too long (handled by black)
    "N803",  # Argument name should be lowercase (X is ML convention)
    "N806",  # Variable in function should be lowercase (X is ML convention)
    "N814",  # Camelcase imported as constant (NATS is intentional)
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --strict-markers"
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for pipelines",
    "smoke: Quick smoke tests",
    "slow: Tests that take longer to run",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/venv/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
